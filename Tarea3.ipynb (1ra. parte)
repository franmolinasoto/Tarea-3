{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/franmolinasoto/Tarea-3/blob/main/Tarea3.ipynb%20(1ra.%20parte)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<a target=\"_blank\" href=\"https://colab.research.google.com/github/AsCiDEN/Tarea-3/blob/main/Tarea3.ipynb\">\n",
        "  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n",
        "</a>"
      ],
      "metadata": {
        "id": "-cQoUM8or-dp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **CD2201-16: Ciencia de Datos en Astronomía**\n",
        "\n",
        "**Profesores:** Boris Cuevas, Paula Díaz, Danilo Sepúlveda, Francisco Urbina\n",
        "\n",
        "# **Tarea 3: Ajuste de modelos**\n",
        "\n",
        "El objetivo de esta tarea es ajustar diferentes modelos a las curvas de rotación de galaxias y, evaluando con las métricas presentadas en clases, concluír que la materia oscura es capaz de explicar la fenomenología descrita por las observaciones."
      ],
      "metadata": {
        "id": "lO_m4RY9OF3Q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **¿Materia oscura o solo materia luminosa?**\n",
        "\n",
        "La curva de rotación de una galaxia es la velocidad a la cual sus estrellas o gas rota en torno a su centro como función de la distancia. Asumiendo movimiento circular y la ley de Gravitación de Newton, se puede obtener la siguiente fórmula para la curva de rotación (o ecuación de movimiento):\n",
        "\n",
        "\\begin{equation}\n",
        "\\tag{1}\n",
        "a_c(R) = \\frac{v^2(R)}{R} = \\frac{G M(r\\leq R)}{R^2} \\implies v(R) = \\sqrt{\\frac{GM(r\\leq R)}{R}},\n",
        "\\end{equation}\n",
        "\n",
        "donde  $G$ es la constante de gravitación universal, y\n",
        "\\begin{equation}\n",
        "\\tag{2}\n",
        "M(R) = M(r\\leq R)= 4\\pi \\int_{0}^R \\rho(r)r^2 dr,\n",
        "\\end{equation}\n",
        "es decir, es la masa encerrada en una esfera de radio $R$ para una densidad de masa volumétrica $\\rho(r)$.\n",
        "\n",
        "Bajo esta ecuación, si conocemos la curva de rotación $v(R)$ de una galaxia, podemos inferir su distribución de masa y vice versa.\n",
        "\n",
        "Una forma de obtener $M(R)$ es asumiendo que la masa de las galaxias está dominada por su componente estelar, y por ende, que existe una relación de proporcionalidad entre perfil de masa galáctico y el perfil luminoso de cada galaxia, esto ha llevado a proponer perfiles de tipo exponenciales (o de Sérsic) de la forma:\n",
        "\n",
        "\\begin{equation}\n",
        "\\tag{3}\n",
        "M_{star}(R, M_1, R_1) = M_1 \\times \\left[1 - \\frac{\\exp(-R/R_1)(R_1 + R)}{R_1} \\right]\n",
        "\\end{equation}\n",
        "\n",
        "Note que este perfil depende de dos parámetros que caracterizan la masa ($M_1$) y el tamaño típico ($R_1$) de la galaxia de estudio."
      ],
      "metadata": {
        "id": "Aq0XCckGifjx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**P1)**\n",
        "1.   Para esta parte de la tarea será necesario trabajar con unidades, en particular, para distancias galácticas la unidad más típica es el kilo-parsec. Defina que es un kilo-parsec (kpc) y muestre su equivalencia en metros. ¿Cuántos planeta Tierra puede colocar uno al lado del otro dentro de 1 kpc de distancia?\n",
        "\n",
        "**Respuesta:**  1 pc = 3.086*e16 metros, entonces 1 kpc = 3.086*e19. Sea el diametro de la tierra es 12742*e3 metros. Basta obtener el siguiente resultado, cantidad tierras = 1kpc/(diametro tierra) = 2.421.911.787.788 aprox.\n",
        "\n",
        "2. Grafique la curva de velocidad $v(R)$ para la distribución de masa dada en la ecuación (3). Para ello considere $M_1 = 10^{10} M_{\\odot}$ y $R_1 = 5 $ kpc, donde $M_\\odot \\approx 1.989\\times 10^{30}$ kg es la masa del sol."
      ],
      "metadata": {
        "id": "B24we19AH43P"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Nota:** Para esta tarea puede utilizar el módulo [astropy.units](https://docs.astropy.org/en/stable/units/) para lidiar fácilmente con las unidades. Esto es completamente opcional, no se asignará puntaje extra si es que lo hacen, pero puede investigarlo si así lo desea. Tampoco se descontará en caso contrario."
      ],
      "metadata": {
        "id": "5yoHJYXDrJsG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "G = 6.67e-11 # constante de gravitación universal en unidades de m^3 kg^-1 s^-2\n",
        "kpc_to_m =  3.086e19# rellene con el valor de 1 kpc en metros\n",
        "solar_masses_to_kg = 1.989e30 # 1 masa solar en kg\n",
        "R_1 = 5*kpc_to_m\n",
        "M_1 = 1e10*solar_masses_to_kg\n"
      ],
      "metadata": {
        "id": "RxAJrMfPILTT"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Cree la función M_star(R, M_1, R_1) según la ecuación (1)\n",
        "\n",
        "def M_star(R, M_1, R_1):\n",
        "   M_star = M_1 * (1-(np.exp(-R/R_1)*(R_1+R))/R_1)\n",
        "   return M_star\n",
        "\n",
        "\n",
        "# Cree la función v_R_stars(R, M1, R1) utilizando la ec. (3) en (1). v(R) debe tener unidades de km/s\n",
        "\n",
        "# Tenga cuidado con las unidades, como referencia la velocidad debería quedar entre ~10-50 km/s\n",
        "def v_R_stars(R, M1, R1):\n",
        "  v_R_stars = (np.sqrt((G*M_star(R, M1, R1))/R))/1000\n",
        "  return v_R_stars\n",
        "\n",
        "# Cree el arreglo \"R\", con distancias desde 0.01 a 100 kpc de forma equiespaciada con 100 elementos.\n",
        "R = np.linspace(0.01,100,100)*kpc_to_m\n",
        "\n",
        "\n",
        "# Calcule v(R) en km/s colocando la ecuación (3) en (1) y haga el gráfico correspondiente\n",
        "v_r_stars = v_R_stars(R, M_1, R_1)\n",
        "\n",
        "# Haga el gráfico :)\n",
        "plt.plot(R,v_r_stars)\n",
        "plt.xlabel('R [m]')\n",
        "plt.ylabel('v [km/s]')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# No olvide en cada eje indicar las unidades."
      ],
      "metadata": {
        "id": "h9d9tpWdIRv3",
        "outputId": "81175094-96d0-41c0-a962-ee6260b88c8f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        }
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. ¿Qué puede decir del comportamiento de $v(R)$ para $R \\gg R_1$? Aproxime $M(R)$ en dicho caso e indique la forma que tendrá $v(R)$.\n",
        "\n",
        "**Respuesta:** Si $R \\gg R_1$, M_star ~ M_1 entonces la curva se veria de la siguiente forma:\n",
        "\n",
        "\n",
        "\n",
        " Note que dicha curva tiene la misma forma que la [curva de rotación de los planetas en el sistema solar!](https://sites.temple.edu/profnewby/2019/05/04/solar-system-rotation-curve/)"
      ],
      "metadata": {
        "id": "h0VRkwjxqd47"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def v_R_starsNuevo(R, M_1, R1):\n",
        "  v_R_starsNuevo = ((np.sqrt((G*M_1)/R)))/1000\n",
        "  return v_R_starsNuevo\n",
        "\n",
        "v_r_starsNuevo = v_R_starsNuevo(R, M_1, R_1)\n",
        "\n",
        "# Haga el gráfico :)\n",
        "plt.plot(R,v_r_starsNuevo)\n",
        "plt.xlabel('R [m]')\n",
        "plt.ylabel('v [km/s]')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "THuvf8UT1fk4",
        "outputId": "f1326576-9c85-47a4-be8c-4ab3586a7ec5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        }
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.legend:No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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s2ePxo0bp+TkZKWmpmrixIkqKyuLKrNhwwZdeOGFSkxMVE5Ojh599NHWPrRm8XJzVwAAjDIaiMrLyzVgwADNmTPnqGVGjBihnTt3Oo8//elPUevHjRunTZs2afHixVq4cKFWrFih22+/3VkfDAY1fPhw9ejRQ+vWrdNjjz2mmTNn6vnnn2+142ou5iECAMAsn8kPv/zyy3X55Zcfs0wgEFBmZmaD6z777DMtWrRIa9as0dlnny1Jevrpp3XFFVfo8ccfV3Z2tl566SVVVlbqhRdekN/vV79+/VRYWKhf//rXUcHJJA99iAAAMMr1fYgKCgqUnp6uXr166c4779R3333nrFu5cqVSU1OdMCRJw4YNk8fj0ccff+yUueiii+T3+50y+fn52rJli/bu3dvgZ1ZUVCgYDEY9WhPzEAEAYJarA9GIESP0hz/8QUuWLNEjjzyi5cuX6/LLL1coFJIkFRcXKz09PWobn8+ntLQ0FRcXO2UyMjKiykTeR8ocbtasWUpJSXEeOTk5LX1oUehDBACAWUYvmTVm7NixzuszzzxT/fv312mnnaaCggJddtllrfa506dP19SpU533wWCwVUOR00LEKDMAAIxwdQvR4Xr27KkuXbroiy++kCRlZmZq165dUWWqq6u1Z88ep99RZmamSkpKospE3h+tb1IgEFBycnLUozU59zILMTEjAAAmtKlA9PXXX+u7775TVlaWJCkvL0/79u3TunXrnDJLly5VOBzW4MGDnTIrVqxQVVWVU2bx4sXq1auXOnXqFNsDOAoumQEAYJbRQFRWVqbCwkIVFhZKkoqKilRYWKht27aprKxM06ZN06pVq/Tll19qyZIluuqqq3T66acrPz9fktSnTx+NGDFCt912m1avXq0PP/xQkydP1tixY5WdnS1JuuGGG+T3+zVx4kRt2rRJr776qp566qmoS2Kmcbd7AADMMhqI1q5dq9zcXOXm5kqSpk6dqtzcXM2YMUNer1cbNmzQv/3bv+mMM87QxIkTNWjQIP31r39VIBBw9vHSSy+pd+/euuyyy3TFFVdoyJAhUXMMpaSk6P3331dRUZEGDRqku+++WzNmzHDNkHuprg8RLUQAAJhhtFP10KFDZR+jI/F7773X6D7S0tL08ssvH7NM//799de//rXZ9YsVb+3EjGECEQAARrSpPkQnK1qIAAAwi0Dk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zw4EAvaf/vQn27Zte/PmzbYke82aNU6Zd99917Ysy/7mm29s27bt3/72t3anTp3siooKp8y9995r9+rVq8l1Ky0ttSXZpaWlx3t4jZq9eIvd496F9n+9saHVPgMAgHjSnL/fzW4hOuecczR//nzdcsstevvttzVmzBht2bJFy5YtU2ZmZosFtaKiIhUXF2vYsGHOspSUFA0ePFgrV66UJK1cuVKpqak6++yznTLDhg2Tx+PRxx9/7JS56KKL5Pf7nTL5+fnasmWL9u7d2+BnV1RUKBgMRj1aW10LEZfMAACItWYHIkm69NJL9Yc//EFjxoxRUVGRli9froyMjBatWHFxsSQdsd+MjAxnXXFxsdLT06PW+3w+paWlRZVpaB/1P+Nws2bNUkpKivPIyck58QNqhJdh9wAAGNOkUWZXX311g8u7du2q1NTUqD47J8PNXadPn66pU6c674PBYKuHIm9tNCUQAQAQe00KRCkpKQ0uz8/Pb9HK1Be5/FZSUqKsrCxneUlJiQYOHOiU2bVrV9R21dXV2rNnj7N9ZmamSkpKospE3h/tEl8gEFAgEGiR42iqSAsR8xABABB7TQpEc+fObe16HOHUU09VZmamlixZ4gSgYDCojz/+WHfeeackKS8vT/v27dO6des0aNAgSdLSpUsVDoc1ePBgp8zPf/5zVVVVObNqL168WL169VKnTp1iflxHQx8iAADMOa4+RC2lrKxMhYWFznD9oqIiFRYWatu2bbIsS1OmTNGvfvUrvf3229q4caPGjx+v7OxsZ7bsPn36aMSIEbrtttu0evVqffjhh5o8ebLGjh2r7OxsSdINN9wgv9+viRMnatOmTXr11Vf11FNPRV0Sc4O6maoZdg8AQKw1KRCdddZZRx2R1ZAhQ4bom2++abTc2rVrlZubq9zcXEnS1KlTlZubqxkzZkiSfvazn+muu+7S7bffrnPOOUdlZWVatGiREhMTnX289NJL6t27ty677DJdccUVGjJkSNQcQykpKXr//fdVVFSkQYMG6e6779aMGTOi+j25AS1EAACYY9l24/eK8Hg8Wrp0qdLS0pq00/PPP18bNmxQz549T7iCbhAMBpWSkqLS0lIlJye3yme8vna7pv15gy7p1VVzbz63VT4DAIB40py/302+l9lll13W5HuVWZbV1N2iFjd3BQDAnCYFoqKiombv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4zlHhwuFQtq4caOysrJaq5ptTrx9j1pKYWHhSfs9sm1bkydP1oIFC7R06VKdeuqpjW4Tb9+j4zlHh4vH36NwOKyKiooG17Wp75DpXt0nu1deecUOBAL2vHnz7M2bN9u33367nZqaahcXF9u2bds33nijfd999znlP/zwQ9vn89mPP/64/dlnn9kPPPCAnZCQYG/cuNHUIbS65p6jX/ziF/Z7771nb9261V63bp09duxYOzEx0d60aZOpQ2h1+/fvtz/55BP7k08+sSXZv/71r+1PPvnE/uqrr2zbtu377rvPvvHGG53y//rXv+ykpCR72rRp9meffWbPmTPH9nq99qJFi0wdQqtr7jmaPXu2/eabb9qff/65vXHjRvsnP/mJ7fF47A8++MDUIbSqO++8005JSbELCgrsnTt3Oo8DBw44ZeL99+h4zlG8/R7dd9999vLly+2ioiJ7w4YN9n333WdblmW///77tm237e8QgSgGnn76abt79+623++3zz33XHvVqlXOuosvvti+6aabosq/9tpr9hlnnGH7/X67X79+9jvvvBPjGsdec87RlClTnLIZGRn2FVdcYa9fv95ArWMnMkT88EfkvNx00032xRdffMQ2AwcOtP1+v92zZ0977ty5Ma93LDX3HD3yyCP2aaedZicmJtppaWn20KFD7aVLl5qpfAw0dG4kRX0v4v336HjOUbz9Ht1yyy12jx49bL/fb3ft2tW+7LLLnDBk2237O2TZtm3Hrj0KAADAfehDBAAA4h6BCAAAxD0CEQAAiHsEIgAAEPcIRAAAIO4RiAAAQNwjEAEAgLhHIAIAAK1ixYoVGjVqlLKzs2VZlt58881mbV9QUKCrrrpKWVlZat++vQYOHKiXXnopqsymTZs0ZswYnXLKKbIsS08++eRx1ZVABCDuDB06VJZlybIsFRYWntC+JkyY4OyruT/2wMmuvLxcAwYM0Jw5c45r+48++kj9+/fX/PnztWHDBt18880aP368Fi5c6JQ5cOCAevbsqYcffviEbhrLTNUA2qwJEyboxRdflCT5fD5169ZN1157rR588EElJiYedbuhQ4fqjDPO0IMPPqguXbrI5/Mddx1KS0t18OBBZWVlacGCBRo9evRx7ws4mVmWdcR/IxUVFfr5z3+uP/3pT9q3b59+8IMf6JFHHtHQoUOPup+RI0cqIyNDL7zwwhHrTjnlFE2ZMkVTpkxpdv2O/1cAAFxgxIgRmjt3rqqqqrRu3TrddNNNsixLjzzyyDG3S0pKOqH/m4xISUlRSkrKCe8HiEeTJ0/W5s2b9corryg7O1sLFizQiBEjtHHjRn3/+99vcJvS0lL16dOnxevCJTMAbVogEFBmZqZycnI0evRoDRs2TIsXL272fgoKCmRZlt577z3l5uaqXbt2uvTSS7Vr1y69++676tOnj5KTk3XDDTfowIEDrXAkQHzZtm2b5s6dq9dff10XXnihTjvtNN1zzz0aMmSI5s6d2+A2r732mtasWaObb765xetDCxGAk8ann36qjz76SD169DjufcycOVPPPPOMkpKSdN111+m6665TIBDQyy+/rLKyMv3oRz/S008/rXvvvbcFaw7En40bNyoUCumMM86IWl5RUaHOnTsfUX7ZsmW6+eab9T//8z/q169fi9eHQASgTVu4cKE6dOig6upqVVRUyOPx6Jlnnjnu/f3qV7/SBRdcIEmaOHGipk+frq1bt6pnz56SpGuuuUbLli0jEAEnqKysTF6vV+vWrZPX641a16FDh6j3y5cv16hRozR79myNHz++VepDIALQpl1yySV69tlnVV5ertmzZ8vn82nMmDHHvb/+/fs7rzMyMpSUlOSEociy1atXn1CdAUi5ubkKhULatWuXLrzwwqOWKygo0JVXXqlHHnlEt99+e6vVh0AEoE1r3769Tj/9dEnSCy+8oAEDBuj3v/+9Jk6ceFz7S0hIcF5blhX1PrIsHA4ff4WBOFJWVqYvvvjCeV9UVKTCwkKlpaXpjDPO0Lhx4zR+/Hg98cQTys3N1e7du7VkyRL1799fI0eO1LJly3TllVfqJz/5icaMGaPi4mJJkt/vV1pamiSpsrJSmzdvdl5/8803KiwsVIcOHZzfhqagUzWAk4bH49F//dd/6f7779fBgwdNVweIe2vXrlVubq5yc3MlSVOnTlVubq5mzJghSZo7d67Gjx+vu+++W7169dLo0aO1Zs0ade/eXZL04osv6sCBA5o1a5aysrKcx9VXX+18xo4dO5zP2Llzpx5//HHl5ubq1ltvbVZdCUQATirXXnutvF7vcU8EB6DlDB06VLZtH/GYN2+epJoW2V/84hcqKipSZWWlduzYoTfeeENnnnmmJGnevHkNbl9QUOB8ximnnNJomaYgEAE4qfh8Pk2ePFmPPvqoysvLTVcHQBvBTNUA4s7QoUM1cODA477nUUMamoUXQNtBCxGAuPTb3/5WHTp00MaNG09oP3fccccRQ4QBtD20EAGIO998843T6bp79+7y+/3Hva9du3YpGAxKknNHbgBtD4EIAADEPS6ZAQCAuEcgAgAAcY9ABAAA4h6BCAAAxD0CEQAAiHsEIgAAEPcIRAAAIO4RiAAAQNz7/wwSA08fujYIAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En 1978, la astrónoma Vera Rubin descubrió que, para distancias grandes, la curva de rotación no seguía la forma predicha por los típicos perfiles de masa (como aquel que usted describió en la parte anterior).\n",
        "\n",
        "Una forma de resolver este misterio es incorporando un segundo elemento que está aportando de forma considerable a la distribución de materia, pero que aparentemente no emite ni absorbe nada de luz, apodado como **materia oscura**.\n",
        "\n",
        "En 1997, Julio Navarro, Carlos Frenk y Simon White publicaron [un artículo científico](https://iopscience.iop.org/article/10.1086/304888/pdf) en el cual proponían un perfil de densidad $\\rho(r)$ para la materia oscura a partir de resultados de simulaciones numéricas. Este perfil de densidad permite obtener la masa encerrada en un radio $R$ de la forma:\n",
        "\n",
        "\\begin{equation}\n",
        "\\tag{4}\n",
        "M_{dm}(R, M_0, R_0) = M_0 \\times \\left[\\ln\\left(\\frac{R_0 + R}{R_0}\\right)  + \\frac{R_0}{R_0 + R} - 1\\right]\n",
        "\\end{equation}\n",
        "\n",
        "4. Añada al gráfico anterior la curva de rotación dada por perfil de la ecuación (4) considerando $M_0 = 5\\times 10^{10} M_{\\odot}$, y $R_0 = 20$ kpc, recuerde añadir una leyenda adecuada que permita identificar ambos perfiles.\n"
      ],
      "metadata": {
        "id": "NWjVeIf3rvX4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Parta por definir la función M_dm(R, M0, R0) tal como se definió en la ec. (4)\n",
        "M0 = 5*M_1\n",
        "R0 = 20*kpc_to_m\n",
        "def M_dm(R, M0, R0):\n",
        "  M_dm = M0*(np.log((R0+R)/R0)+R0/(R0+R)-1)\n",
        "  return M_dm\n",
        "\n",
        "# Cree la función v_R_dm(R, M0, R0) utilizando la ec. (4) en (1). v(R) debe tener unidades de km/s\n",
        "def v_R_dm(R1, M0, R0):\n",
        "    v_R_dm = (np.sqrt((G*M_dm(R, M0, R0))/R))/1000\n",
        "    return v_R_dm\n",
        "\n",
        "# Utilice el mismo arreglo R de la parte anterior.\n",
        "R = np.linspace(0.01,100,100)*kpc_to_m\n",
        "\n",
        "# Repita el cálculo de v(R) pero para el perfil de la ecuación (4)\n",
        "v_r_stars1 = v_R_stars(R, M0, R0)\n",
        "v_r_dm = v_R_dm(R, M0, R0)\n",
        "\n",
        "# Gráfico:\n",
        "plt.plot(R,v_r_stars1, label = 'v(R) stars')\n",
        "plt.plot(R,v_r_dm, label = 'v(R) dm')\n",
        "plt.xlabel('R [m]')\n",
        "plt.ylabel('v [km/s]')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Lz9WcYrpym6c",
        "outputId": "8fe0ef06-1ee5-41fa-e9e4-9c0b7eb9a5d8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. ¿Qué componente parece dominar a distancias cortas? ¿Cuál a distancias largas?\n",
        "\n",
        "**Respuesta (corta):** Nose dou"
      ],
      "metadata": {
        "id": "HLu23NWrzxyD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Es razonable pensar que uno necesita tanto el componente deducido por la masa estelar (o luminosa) como aquella que no interactúa con la luz (materia oscura), por lo que un perfil de masa más completo involucra una suma de cada componente tal como se describe en la siguiente ecuación:\n",
        "\n",
        "\\begin{equation}\n",
        "\\tag{5}\n",
        "M_{tot}(R, M_0, R_0, M_1, R_1 ) =  M_{dm}(R,M_0, R_0) + M_{star}(R, M_1, R_1)\n",
        "\\end{equation}"
      ],
      "metadata": {
        "id": "tm2s5CeLyndN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora analizaremos la curva de rotación de la [galaxía NGC 6503](https://es.wikipedia.org/wiki/NGC_6503), para ello cargaremos el archivo **velocity_curve_NGC6503.txt**.\n",
        "\n",
        "Las columnas del archivo tienen la siguiente información, distancia del centro (en kpc), velocidad medida (en km/s) y el error estándar en la medición (en km/s)."
      ],
      "metadata": {
        "id": "lVyV5JQ5BIiG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Partiremos por \"montar\" el drive, esto permite que podamos leer los archivos de nuestro drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')    # se les debe abrir una pestaña extra pidiendo permisos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a9DfRZQii-I9",
        "outputId": "be6fb77c-ea64-4a00-b1c6-aadb72c16a5f"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Encuentren la ruta de su archivo, para ello puede utilizar la barra de herramientas izquierda\n",
        "# lleguen a su archivo desde su \"drive\" y con el click derecho \"copiar ruta\" y luego la pegan\n",
        "# como un string en la siguiente variable.\n",
        "path_archivo = '/content/drive/MyDrive/Modulo Astro :)/velocity_curve_NGC6503.txt'\n",
        "datos = np.loadtxt(path_archivo)\n",
        "datos"
      ],
      "metadata": {
        "id": "zhYQ121GjETU",
        "outputId": "07e22305-4d79-4af9-fe79-b139db5664f0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[  0.67212755,  86.72566372,  10.17699115],\n",
              "       [  1.40111899, 104.6460177 ,   5.08849558],\n",
              "       [  2.05642507, 111.72566372,   1.7699115 ],\n",
              "       [  2.75232209, 119.69026549,   1.7699115 ],\n",
              "       [  3.53506911, 122.56637168,   1.99115044],\n",
              "       [  4.23754845, 122.56637168,   1.7699115 ],\n",
              "       [  4.98464126, 118.5840708 ,   1.99115044],\n",
              "       [  5.68803481, 117.47787611,   1.99115044],\n",
              "       [  6.34919184, 117.47787611,   1.7699115 ],\n",
              "       [  7.09299349, 117.47787611,   1.7699115 ],\n",
              "       [  7.79656988, 116.15044248,   1.32743363],\n",
              "       [  8.54055438, 115.92920354,   0.88495575],\n",
              "       [  9.15947488, 117.03539823,   1.10619469],\n",
              "       [  9.90291085, 117.47787611,   0.44247788],\n",
              "       [ 10.60520734, 117.69911504,   1.10619469],\n",
              "       [ 11.3894171 , 118.80530973,   0.66371681],\n",
              "       [ 12.09262781, 117.92035398,   0.88495575],\n",
              "       [ 12.75415052, 117.47787611,   1.99115044],\n",
              "       [ 13.41658744, 115.92920354,   1.32743363],\n",
              "       [ 14.15910919, 117.47787611,   0.88495575],\n",
              "       [ 14.90345937, 116.81415929,   1.10619469],\n",
              "       [ 15.64726103, 116.81415929,   2.21238938],\n",
              "       [ 16.34992321, 116.59292035,   1.54867257],\n",
              "       [ 16.96975792, 116.59292035,   1.99115044],\n",
              "       [ 17.75597894, 115.26548673,   1.54867257],\n",
              "       [ 18.45754406, 116.37168142,   1.7699115 ],\n",
              "       [ 19.16075477, 115.48672566,   1.7699115 ],\n",
              "       [ 19.86177137, 117.25663717,   1.32743363],\n",
              "       [ 20.52274556, 117.47787611,   3.09734513],\n",
              "       [ 21.22229942, 121.01769912,   3.76106195],\n",
              "       [ 21.96811234, 118.5840708 ,   3.76106195]])"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Haga un gráfico de la curva de rotación incluyendo barras de error con plt.errorbar\n",
        "\n",
        "plt.errorbar(datos[:,0],datos[:,1],yerr = datos[:,2],fmt = 'o', color = 'b',capsize=3, label = 'NGC6503')\n",
        "plt.xlabel('R [kpc]')\n",
        "plt.ylabel('v [km/s]')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "# No olvide añadir todo lo esencial de un gráfico y que los errores se vean de forma clara.\n",
        "# Para mejor claridad cuando comparemos con modelos, haga que los puntos NO estén conectados por alguna línea.\n"
      ],
      "metadata": {
        "id": "pCE-LCRVjT8r",
        "outputId": "8f9b8f5c-1cbb-490f-99c6-399191101354",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        }
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ajustaremos 3 modelos de curva de rotación para esta galaxia.\n",
        "\n",
        "1. Solo componente estelar.\n",
        "2. Solo materia oscura.\n",
        "3. Componente estelar y materia oscura.\n",
        "\n",
        "¿Es este un problema de ajuste de modelos lineal o no-lineal?\n",
        "\n",
        "**Respuesta (una o dos palabras):**"
      ],
      "metadata": {
        "id": "RvPZZPTWDqr4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importamos curve_fit que se encargará de hacer el ajuste.\n",
        "from scipy.optimize import curve_fit"
      ],
      "metadata": {
        "id": "ifw7Tj_Ojbzd"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Escriba la función v_R_tot(R, M0, R0, M1, R1) que utiliza M_tot descrito en la ecuación (5).\n",
        "# Hint: puede directamente construir esta ecuación con v_R_dm y v_R_stars, le puede ahorrar errores.\n",
        "def M_tot(R,M0,R0,M1,R1):\n",
        "  M_tot = M0*(np.log((R0+R)/R0)+R0/(R0+R)-1) + M1 * (1-(np.exp(-R/R1)*(R1+R))/R_1)\n",
        "  return M_tot\n",
        "def v_R_tot(R, M0, R0, M1, R1):\n",
        "  v_R_tot = v_r_dm(R1,M0,R0) + v_r_stars(R1,M1,R1)\n",
        "  return v_R_tot\n",
        "\n",
        "# Utilice curve_fit para ajustar los 3 modelos antes mencionados. Incluya los errores.\n",
        "popt_stars, pcov_stars = curve_fit(M_star,R,v_r_stars,p0=[1.0e11, 10 * kpc_to_m], sigma=None)\n",
        "popt_dm, pcov_dm = curve_fit(M_dm,R,v_r_dm,p0=[1.0e11, 10 * kpc_to_m], sigma=None)\n",
        "popt_tot, pcov_tot = curve_fit(M_tot,R,v_R_tot,p0=[1.0e11, 10 * kpc_to_m], sigma=None)\n",
        "\n",
        "# Para las condiciones iniciales, considere masas entre 1e10 a 1e11 masas solares, y radios entre 1 a 20 kpc. (ya se pusieron condiciones iniciales)\n",
        "\n",
        "# Rellene según corresponda, ignore las variables \"pcov\"\n",
        "\n"
      ],
      "metadata": {
        "id": "J5tpsnovn215",
        "outputId": "7fe0dbbe-d4b9-4360-901e-49f5dd3203ca",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        }
      },
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-81-22340bdf47ca>:5: RuntimeWarning: invalid value encountered in log\n",
            "  M_dm = M0*(np.log((R0+R)/R0)+R0/(R0+R)-1)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "float() argument must be a string or a real number, not 'function'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-110-a1427878777e>\u001b[0m in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mpopt_stars\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpcov_stars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcurve_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM_star\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv_r_stars\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mp0\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1.0e11\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mkpc_to_m\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mpopt_dm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpcov_dm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcurve_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM_dm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv_r_dm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mp0\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1.0e11\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mkpc_to_m\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mpopt_tot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpcov_tot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcurve_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM_tot\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mR\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv_R_tot\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mp0\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1.0e11\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m10\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mkpc_to_m\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m# Para las condiciones iniciales, considere masas entre 1e10 a 1e11 masas solares, y radios entre 1 a 20 kpc. (ya se pusieron condiciones iniciales)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/scipy/optimize/_minpack_py.py\u001b[0m in \u001b[0;36mcurve_fit\u001b[0;34m(f, xdata, ydata, p0, sigma, absolute_sigma, check_finite, bounds, method, jac, full_output, nan_policy, **kwargs)\u001b[0m\n\u001b[1;32m    923\u001b[0m     \u001b[0;31m# optimization may produce garbage for float32 inputs, cast them to float64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcheck_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m         \u001b[0mydata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray_chkfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mydata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m         \u001b[0mydata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mydata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36masarray_chkfinite\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m    626\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    627\u001b[0m     \"\"\"\n\u001b[0;32m--> 628\u001b[0;31m     \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    629\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchar\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtypecodes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'AllFloat'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    630\u001b[0m         raise ValueError(\n",
            "\u001b[0;31mTypeError\u001b[0m: float() argument must be a string or a real number, not 'function'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# En el gráfico de los datos, añada los 3 modelos con los parámetros óptimos encontrados en la parte anterior.\n",
        "# No olvide añadir una leyenda adecuada.\n"
      ],
      "metadata": {
        "id": "X748XGiTkND6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evaluaremos cada modelo con la métrica $\\chi ^2$ definida como:\n",
        "\n",
        "$$\\chi ^2 = \\sum_{i=1}^N \\frac{(y_i - v_R(x_i))^2}{\\sigma_i^2}, $$\n",
        "\n",
        "donde $y_i$ es el dato de la velocidad de rotación en la distancia $x_i$, cuyo error de medición es $\\sigma_i$ y $v_R$ es el modelo respectivo.\n"
      ],
      "metadata": {
        "id": "smOManAmF60t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Para evaluar las métricas necesita primero evaluar su modelo en cada x_i\n",
        "pred_tot = v_R_tot()\n",
        "pred_dm = v_R_dm()\n",
        "pred_stars = v_R_stars()\n",
        "\n",
        "# Defina la función chi_cuadrado(datos, sigma, pred), donde datos, sigma y pred\n",
        "# son arreglos de igual largo que contienen los datos y_i, los errores sigma_i y\n",
        "# la predicción de algún modelo.\n",
        "# Esto se puede hacer en 1 línea con arreglos de numpy :)\n",
        "\n",
        "def chi_cuadrado(datos, sigma, pred):\n",
        "  pass\n",
        "\n",
        "# Haga un print reportando el chi-cuadrado de cada modelo. Rellene según corresponda.\n",
        "\n",
        "print('Chi-cuadrado (dm+stars): ', chi_cuadrado())\n",
        "print('Chi-cuadrado (dm-only): ', chi_cuadrado())\n",
        "print('Chi-cuadrado (stars-only): ', chi_cuadrado())"
      ],
      "metadata": {
        "id": "uyplDMjRlz4V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Responda:**\n",
        "1. ¿Qué modelo ajusta mejor los datos bajo la métrica anterior? ¿El peor?\n",
        "2. ¿Qué puede concluír de los constituyentes de la galaxia NGC6503?"
      ],
      "metadata": {
        "id": "H997rsDcHbbU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **¿Cuántos parámetros utilizo?**\n",
        "\n",
        "En el problema anterior el modelo que utilizamos tenía una motivación física, no estaba escogido \"al azar\". En esta parte trataremos de modelar algo del cual no tenemos una motivación física para proponer un modelo, en estos casos siempre debe primar el utilizar modelos sencillos por sobre modelos de alta complejidad o con muchos parámetros. En particular, ajustaremos polinomios de distinto grado y determinaremos el grado óptimo del modelo tal que su capacidad predictiva no se vea alterada."
      ],
      "metadata": {
        "id": "CmttB9pLM4rE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Partiremos por generar los datos.\n",
        "\n",
        "Considere la siguiente función:\n",
        "\n",
        "$$f(x) = 5\\sin(x) + 5\\cos(x^2) + 3$$\n",
        "\n",
        "Le añadiremos ruido utilizando una distribución normal $N(\\mu= 0, \\sigma=2)$."
      ],
      "metadata": {
        "id": "eXzCOtYCcRCG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.seed(123)  # investigue que hace esta línea de código"
      ],
      "metadata": {
        "id": "prfAsnuUgHAt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Responda:**\n",
        "- ¿Qué hace la línea de código anterior? ¿Por qué es una buena práctica utilizar una \"semilla\" cuando se realizan experimentos aleatorios?"
      ],
      "metadata": {
        "id": "LmQvdaf0gK3I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "N_data = 100\n",
        "x = np.linspace(0,np.pi/2, N_data)\n",
        "\n",
        "# Calcule un arreglo con los valores de la función f(x) con el arreglo antes definido\n",
        "y_real =\n",
        "\n",
        "# Ahora sume el \"ruido\" aleatorio. Para ello utilice np.random.normal()\n",
        "# Revise la documentación y utilice una desviación estándar igual a 2\n",
        "\n",
        "y_ruido =\n",
        "\n",
        "# Visualice sus datos :)\n",
        "# Puede graficar la función sin ruido si así lo desea. (opcional)\n"
      ],
      "metadata": {
        "id": "nfEoEdZ7g7Yh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora, de forma similar a lo visto en clases, haremos un ajuste con modelos polinomiales y, utilizando cross-validation, determinaremos el grado del polinomio óptimo a modo de favorecer la capacidad predictiva del modelo."
      ],
      "metadata": {
        "id": "rXQEWxgxiOWG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importamos los esenciales :)\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import PolynomialFeatures\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "we9pxxpIhHqe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# En la siguiente variable guardaremos el error asociado a los modelos\n",
        "# Exploraremos polinomios de grado 1 hasta 10, cada fila estará asociada a un modelo\n",
        "# distinto y las columnas a alguna iteración de cross-validation\n",
        "\n",
        "N_iteraciones  = 100 # puede cambiar este valor si lo desea\n",
        "errores_modelos = np.zeros((10, N_iteraciones))"
      ],
      "metadata": {
        "id": "3vjBdv8lhI_u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora, repita el siguiente experimento para realizar cross-validation. Para cada iteración debe hacer lo siguiente:\n",
        "\n",
        "- Divida el dataset en entrenamiento y testeo (use una proporción adecuada). Utilice la función train_test_split!\n",
        "- Con el set de entrenamiento ajuste el modelo polinomial (desde el grado 1 al 10). Puede utilizar PolynomialFeatures para generar la matriz de diseño que necesite, use include_bias=True.  \n",
        "- Evalúe su modelo en los datos de testeo y utilice las predicciones para evaluar el mean_squared_error.\n",
        "- Guarde el MSE en la matriz de errores."
      ],
      "metadata": {
        "id": "i7HRf3s6jAIS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(100):\n",
        "  # Rellene según corresponda\n",
        "    for j in range(10):\n",
        "      # Aquí puede iterar para cada modelo o grado del polinomio :) (cuidado que j parte siendo 0)"
      ],
      "metadata": {
        "id": "U0LGJ2W-kC9s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Finalmente, grafique el MSE promedio de las N iteraciones, para cada modelo y decida cuál es el grado óptimo del polinomio que debería utilizar para su modelo."
      ],
      "metadata": {
        "id": "D3nTVpvkkOvw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Note que para calcular el promedio pedido puede utilizar np.mean(errores_modelos, axis=1) ¿qué hace el parámetro axis=1?\n",
        "# Añada su gráfico."
      ],
      "metadata": {
        "id": "GMpU4FEbhLkS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "El grado óptimo del polinomio es..... (complete la oración)"
      ],
      "metadata": {
        "id": "m2xhyHZDql_c"
      }
    }
  ]
}